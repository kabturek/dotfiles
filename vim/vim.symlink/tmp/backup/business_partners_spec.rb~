
require 'spec_helper'

describe Account do

  before do
    PuchatekApi::Base.credentials = {
        :uuid => "uuid",
        :email => "email",
        :password => "password"
    }
  end

  it "change the name of the contractee" do
    stub_request(:put, "http://email:password@sg1.smtsoftware.com/puchatek_development/contractor/uuid/contractee/12345/friendlyName").
         with(:body => "\"new_name\"", 
              :headers => {
                'Accept'=>'*/*; q=0.5, application/xml', 
                'Accept-Encoding'=>'gzip, deflate', 
                'Content-Length'=>'10', 
                'Content-Type'=>'application/json;charset=utf8'}).
         to_return(:status => 200, :body => "new_name", :headers => {})
    BusinessPartner.new(:uuid => 12345).change_name('new_name').to_s.should == "new_name"
  end

  it "return false when contractee new_name is empty" do
     stub_request(:put, "http://email:password@sg1.smtsoftware.com/puchatek_development/contractor/uuid/contractee/12345/friendlyName").
         with(:body => "\"\"", 
              :headers => {
                'Accept'=>'*/*; q=0.5, application/xml', 
                'Accept-Encoding'=>'gzip, deflate', 
                'Content-Length'=>'2', 
                'Content-Type'=>'application/json;charset=utf8'}).
         to_return(:status => 400, :body => "", :headers => {})

    BusinessPartner.new(:uuid => 12345).change_name('').should == false
  end

  it "return false when trying to block a partner that is already blocked" do
    stub_request(:post, "http://email:password@sg1.smtsoftware.com/puchatek_development/contractor/uuid/blacklist/").
      with(:body => "{\"ContracteeUUID\":12345}", 
           :headers => {
             'Accept'=>'*/*; q=0.5, application/xml', 
             'Accept-Encoding'=>'gzip, deflate', 
             'Content-Length'=>'24', 
             'Content-Type'=>'application/json'}).
      to_return(:status => 200, :body => "", :headers => {})
    bp = BusinessPartner.new(:uuid => 12345)
    bp.block()
    stub_request(:post, "http://email:password@sg1.smtsoftware.com/puchatek_development/contractor/uuid/blacklist/").
      with(:body => "{\"ContracteeUUID\":12345}", 
           :headers => {
             'Accept'=>'*/*; q=0.5, application/xml', 
             'Accept-Encoding'=>'gzip, deflate', 
             'Content-Length'=>'24', 
             'Content-Type'=>'application/json'}).
      to_return(:status => 409, :body => "", :headers => {})
    bp.block.should == false
  end

  it "return false when trying to unblock a partner that isn't blocked" do
    stub_request(:delete, "http://email:password@sg1.smtsoftware.com/puchatek_development/contractor/uuid/blacklist/12345").
      with(:headers => {'Accept'=>'*/*; q=0.5, application/xml', 'Accept-Encoding'=>'gzip, deflate'}).
      to_return(:status => 409, :body => "", :headers => {})
    BusinessPartner.new(:uuid => 12345).unblock.should == false
  end
  it "returns list of all contractors" do
    stub_request(:get, "http://email:password@sg1.smtsoftware.com/puchatek_development/contractor/uuid/contractee?source=www").
      with(:headers => {'Accept'=>'*/*; q=0.5, application/xml', 'Accept-Encoding'=>'gzip, deflate'}).
      to_return(:status => 200, :body => get_response('business_partner_all'), :headers => {})

    BusinessPartner.all.count.should == 3
    BusinessPartner.all[0].instance_of?(BusinessPartner).should == true
  end
  it "returns list of all blacklisted contractors" do
    stub_request(:get, "http://email:password@sg1.smtsoftware.com/puchatek_development/contractor/uuid/contractee?blacklisted=true&source=www").
      with(:headers => {'Accept'=>'*/*; q=0.5, application/xml', 'Accept-Encoding'=>'gzip, deflate'}).
      to_return(:status => 200, :body => get_response('business_partner_find_all_blacklisted'), :headers => {})
    BusinessPartner.all(:blocked => true).count.should == 1
    BusinessPartner.all(:blocked => true)[0].name.should == 'blacklisted contractor'
  end
  it "returns list of blocked contractors when user searched for empty string" do
    stub_request(:get, "http://email:password@sg1.smtsoftware.com/puchatek_development/contractor/uuid?blacklisted=true&phrase=").
      with(:headers => {'Accept'=>'*/*; q=0.5, application/xml', 'Accept-Encoding'=>'gzip, deflate'}).
      to_return(:status => 200, :body => '{}', :headers => {})
    BusinessPartner.find_with_params(:filter_type => "phrase", :blocked => true).count.should == 0
  end
end
