%h2 Workout
%p
  Title:
  = @workout.title
%p 
  Description:
  = @workout.description
%p 
  Points:
  =@workout.track.track_points.count
%p
  = "total time = " + time(@workout.track.time)
  = "total length = %2.f m" % @workout.track.length 

= link_to 'Edit', edit_workout_path(@workout)
\|
= link_to 'Back', workouts_path

.span8
  #container

  #plot_options
    %input{:name => :speed, :type => :checkbox, :class => :data_series, :checked => true} Speed
    %input{:name => :elevation, :type => :checkbox, :class => :data_series, :checked => true} Elevation

  %p#clickdata
.span8
  #map_canvas


%script{:type => "text/javascript",
  :src  => "http://maps.googleapis.com/maps/api/js?key=#{Trainer::GMAPS_API_KEY}&sensor=false&libraries=geometry"}
:javascript
  jQuery(function($) {
    var coordinates = google.maps.geometry.encoding.decodePath("#{@workout.track.encoded_polyline}");

    var polyline = new google.maps.Polyline({
      path: coordinates,
      strokeColor: "#FF0000",
      strokeOpacity: 1.0,
      strokeWeight: 2
    });

    var bounds = new google.maps.LatLngBounds();
    for (var i = 0; i < coordinates.length; i++) {
        bounds.extend(coordinates[i]);
    }

    var myOptions = {
      center: polyline.getPath().getAt(0),
      zoom: 13,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      panControl: false,
      zoomControl: true,
      mapTypeControl: true,
      scaleControl: false,
      streetViewControl: false,
      overviewMapControl: false
    };

    var map = new google.maps.Map(document.getElementById("map_canvas"),
      myOptions);

    polyline.setMap(map)

    map.fitBounds(bounds);

    //var bikeLayer = new google.maps.BicyclingLayer();
    //bikeLayer.setMap(map);

    $("#plot_options input.data_series").click(plotAccordingToChoices);

    var elevation_data = #{@workout.track.elevation_json};
    var speed_data = #{@workout.track.speed_json};
    var datasets = {
      elevation: { label: "Elevation", data: elevation_data, yaxis: 1 },
      speed: { label: "Speed", data: speed_data, yaxis: 2}
    }
    // hard-code color indices to prevent them from shifting as
    // datasets are turned on/off
    var i = 0;
    $.each(datasets, function(key, val) {
      val.color = i;
      ++i;
    });

    function plotAccordingToChoices(){
      var data = [];
      $("#plot_options input.data_series:checked").each(function () {
        var key = $(this).attr("name");
        if (key && datasets[key])
          data.push(datasets[key]);
      });
      if (data.length > 0) {
        $.plot($("#container"), data, {
          series: {
            lines: { show: true },
            points: { show: false }
          },
          grid: { hoverable: true, clickable: true },
          xaxis: {
            mode: "time",
            timeformat: "%h:%M"
          },
          crosshair: { mode: "x" },
          grid: { hoverable: true, autoHighlight: false },
          yaxes: [ 
            { 
            tickFormatter: elevationFormatter,
            min: 0
            },
            {
            // align if we are to the right
            alignTicksWithAxis: true,
            position: "right",
            tickFormatter: speedFormatter
            } ],
          legend: false
        });
      }
    }
    plotAccordingToChoices();

    function speedFormatter(v, axis) {
      return v.toFixed(axis.tickDecimals) +" km/h";
    }
    function elevationFormatter(v, axis) {
      return v.toFixed(axis.tickDecimals) +"m";
    }

    function showTooltip(x, y, contents) {
      $('<div id="tooltip">' + contents + '</div>').css( {
      position: 'absolute',
      display: 'none',
      top: y + 5,
      left: x + 5,
      border: '1px solid #fdd',
      padding: '2px',
      'background-color': '#fee',
      opacity: 0.80
      }).appendTo("body").fadeIn(200);
    }

    var previousPoint = null;
    $("#container").bind("plothover", function (event, pos, item) {
      $("#x").text(pos.x.toFixed(2));
      $("#y").text(pos.y.toFixed(2));
      if (item) {
        if (previousPoint != item.dataIndex) {
        previousPoint = item.dataIndex;
        $("#tooltip").remove();
        var x = item.datapoint[0].toFixed(2),
        y = item.datapoint[1].toFixed(2);
        showTooltip(item.pageX, item.pageY,
        item.series.label + " = " + y);
        }
      } else {
        $("#tooltip").remove();
        previousPoint = null;
      }
    });
    $("#container").bind("plotclick", function (event, pos, item) {
      if (item) {
        $("#clickdata").text("You clicked point " + item.dataIndex + " in " + item.series.label + ".");
        plot.highlight(item.series, item.datapoint);
      }
    }); 

  });
  
