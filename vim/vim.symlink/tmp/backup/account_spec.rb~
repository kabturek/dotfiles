require 'spec_helper'

describe Account do

  before do
    PuchatekApi::Base.credentials = {
        :uuid => "uuid",
        :email => "email",
        :password => "password"
    }
  end

  it "return :agreement_from_tomorrow when valid_from date is tomorrow" do
    stub_request(:get, "http://email:password@sg1.smtsoftware.com/puchatek_development/contractor/profile").
      with(:headers => {'Accept'=>'*/*; q=0.5, application/xml', 'Accept-Encoding'=>'gzip, deflate'}).
      to_return(:status => 200, :body => {:valid_from => Time.now + 1.day}.to_json, :headers => {})

    Account.new.contract_validity_type.should == :valid_from_tomorrow

    stub_request(:get, "http://email:password@sg1.smtsoftware.com/puchatek_development/contractor/profile").
      with(:headers => {'Accept'=>'*/*; q=0.5, application/xml', 'Accept-Encoding'=>'gzip, deflate'}).
      to_return(:status => 200, :body => {:valid_from => Time.now}.to_json, :headers => {})
    Account.new.contract_validity_type.should_not == :valid_from_tomorrow
  end

  it "denies access to user management to user without permissions" do 
    stub_request(:get, "http://email:password@sg1.smtsoftware.com/puchatek_development/contractor/profile").
      with(:headers => {'Accept'=>'*/*; q=0.5, application/xml', 'Accept-Encoding'=>'gzip, deflate'}).
      to_return(:status => 200, :body => get_response('contractor/profile_valid_user'), :headers => {})

    Account.new.can?(:user_management).should raise_error
  end

  it "allows access to user with permissions" do 
    stub_request(:get, "http://email:password@sg1.smtsoftware.com/puchatek_development/contractor/profile").
      with(:headers => {'Accept'=>'*/*; q=0.5, application/xml', 'Accept-Encoding'=>'gzip, deflate'}).
      to_return(:status => 200, :body => get_response('contractor/profile_valid_user'), :headers => {})

    Account.new.can?(:upload_document).should == true
  end

  it "returns a count of user documents" do
    stub_request(:get, "http://email:password@sg1.smtsoftware.com/puchatek_development/contractor/profile").
      with(:headers => {'Accept'=>'*/*; q=0.5, application/xml', 'Accept-Encoding'=>'gzip, deflate'}).
      to_return(:status => 200, :body => get_response('contractor/profile_valid_user'), :headers => {})

    Account.new.documents_count.should == 2
  end

  it "returns a count of user business partners" do
    stub_request(:get, "http://email:password@sg1.smtsoftware.com/puchatek_development/contractor/profile").
      with(:headers => {'Accept'=>'*/*; q=0.5, application/xml', 'Accept-Encoding'=>'gzip, deflate'}).
      to_return(:status => 200, :body => get_response('contractor/profile_valid_user'), :headers => {})
    Account.new.partners_count.should == 10
  end

  it "sets the notificaiton  type" do
    stub_request(:put, "http://email:password@sg1.smtsoftware.com/puchatek_development/login/notifications").
      with(:body => "All", 
           :headers => {'Accept'=>'*/*; q=0.5, application/xml', 'Accept-Encoding'=>'gzip, deflate', 'Content-Length'=>'3', 'Content-Type'=>'application/json'}).
           to_return(:status => 200, :body => "\"All\"", :headers => {})

    Account.new.set_notifications('All').should == true
  end

  it "doesnt allow to set the notification type to arbitary value" do
    stub_request(:put, "http://email:password@sg1.smtsoftware.com/puchatek_development/login/notifications").
         with(:body => "Error", 
              :headers => {'Accept'=>'*/*; q=0.5, application/xml', 'Accept-Encoding'=>'gzip, deflate', 'Content-Length'=>'5', 'Content-Type'=>'application/json'}).
         to_return(:status => 400, :body => "", :headers => {})


    Account.new.set_notifications('Error').should == false
  end
end
