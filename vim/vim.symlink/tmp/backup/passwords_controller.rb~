# encoding: UTF-8 
# Kontroler odpowiedzialny za obsługę haseł w serwisie
# Zmiana hasła na podstawie tokenu i przypomnienie hasła.
class PasswordsController < ApplicationController

  before_filter :logged_in_restriction, :only => [:remind, :send_reminder, :reminder_sent]
  before_filter :login_required!, :only => [:index]

  # /GET
  def new
  end

  # /POST
  def create
    if User.new_password_valid?(params[:new_password], params[:new_password_confirmation]) && User.change_password_with_token(params[:token], params[:new_password])
      redirect_to new_session_path, :alert => t('flashes.password_changed')
    else
      if !User.new_password_valid?(params[:new_password], params[:new_password_confirmation])
        redirect_to new_password_with_token_path(params[:token]), :alert => t('flashes.alert.wrong_confirm')
      else
        render 'token_already_used'
      end
    end
  end

  # /PUT
  def update
    if current_user.change_password(params[:password], params[:new_password], params[:new_password_confirmation])
      session[:user][:password] = params[:new_password]
      redirect_to success_password_path, :notice => t('flashes.password_changed')
    else
      redirect_to password_path, :alert => current_user.errors[:password]
    end
  end

  # /GET
  def remind
  end

  # /POST
  def send_reminder
    if User.request_password_reset(params[:email])
      redirect_to reminder_sent_password_path
    else
      alert = User.check_email(params[:email]) ? t('flashes.alert.email_invalid') : t('flashes.alert.email_required')
      redirect_to remind_password_path, :alert => alert
    end
  end

  # /GET
  def reminder_sent
  end

  # /GET
  def success
  end

end
