<?php

/**
 * Employee
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ptclean
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Employee extends BaseEmployee
{ 
  public $created_new_user = false;
  public $username = false;
  public $user_password = false;
  public static $user_types = array(
    0 => 'recruit',
    1 => 'employee',
    2 => 'recruiter'
  );

  public static $stages = array(
    1 => "1 – phone interview",
    2 => "2 – first recruitment test",
    3 => "3 – interview",
    4 => "4 – all recruitment tests",
    5 => "5 – 30 day trial period",
    6 => "6 – regular employment",
    7 => "7 – past employee/candidate"
  );

  public static $sources = array(
    'employee' => 'employee',
    'newspaper' => 'newspaper',
    'other' => 'other'
  );
  public static function getSources(){
    return self::$sources;
  }

  public static function getUserTypes(){
    return self::$user_types;
  }
  public static function getStages($empty = false){
    if($empty){
      $stages = self::$stages;
      $stages[null] = $empty;
      return $stages;
    }
    return self::$stages;
  }
  public function calculateTotalScore(){
    $this->total_score = (int) $this->candidates_strengths + (int) $this->why_hire + (int) $this->why_contacted + (int) $this->values_most + (int) $this->likes_dislikes;
    if($this->candidates_strengths == 1 
      || $this->why_hire == 1 
      || $this->why_contacted == 1
      || $this->values_most == 1
      || $this->likes_dislikes == 1){
        $this->total_score = 1;
    }
    return $this->total_score;
  }

  public function preSave($event){
    if (!$this->isNew() && ($this->approved == true) && empty($this->user_id)) {
      $user = new sfGuardUser();
      $user->first_name = $this->first_name;
      $user->last_name = $this->last_name;
      $user->email_address = $this->email_address;
      $user->is_super_admin = false;
      $user->is_active = true;
      $user->generateUsername();
      $this->user_password = $user->generatePassword();
      $this->username = $user->username;
      $user->save();
      $this->user_id = $user->id;
      $this->created_new_user = true;
    }
    $this->calculateTotalScore();
    if (!$this->isModified())
      return;

    $modifiedFields = $this->getModified();
    if (!$this->isNew() && array_key_exists('current_stage', $modifiedFields)) {
      $event->getInvoker()->changeStage($event->getInvoker()->current_stage, $this->getInvoker()->category_id);
    }
    return true;
  }

  public function changeStage($new_stage, $category_id){
    // assign all inquiries from the new stage to the employee
    foreach(Doctrine::getTable('Inquiry')->getTestsForStage($new_stage, $category_id) as $inquiry){
      $this->assign($inquiry);
    }
    foreach(Doctrine::getTable('Page')->getPagesForStage($new_stage, $this->getLanguage(), $category_id) as $page){
      //send messages for this candidate
      $page->send($this);
    }
    if($new_stage == 5 && empty($this->first_day)){
      $this->first_day = date('Y-m-d');
    }
    if($new_stage == 5){
      $this->user_type = 1;
      $this->status_id = Doctrine::getTable('EmployeeStatus')->getStatusId('current');
    }
    if($new_stage == 7){
      $this->getUser()->blockUser();
    }
  }
  public function assign($inquiry){
    $q = Doctrine::getTable('EmployeeInquiry')->createQuery('ei')
      ->where('ei.inquiry_id = ?', $inquiry->id)
      ->andWhere('ei.employee_id = ?', $this->id)
      ->andWhere('ei.is_completed = ?', false);
    $employee_inquiry = $q->fetchOne();
    if(!$employee_inquiry){
      $employee_inquiry = new EmployeeInquiry();
      $employee_inquiry->inquiry_id = $inquiry->id;
      $employee_inquiry->employee_id = $this->id;
      $employee_inquiry->is_completed = false;
      $employee_inquiry->tries  = 0;
      $employee_inquiry->max_tries  = 3;
      if($inquiry->time){
        $employee_inquiry->deadline = date('Y-m-d H:i:s', time() + ($inquiry->time * 43200));
      }
      $employee_inquiry->save();
    }
    return $employee_inquiry;
  }
  public function promote(){
    if($this->current_stage < 6){
      //$this->changeStage($this->current_stage + 1);
      $this->current_stage = (int)$this->current_stage + 1;
      $this->save();
    }
  }
  public function getTests(){
    $query = Doctrine::getTable('EmployeeInquiry')->createQuery('ei')
      ->leftJoin('ei.Inquiry i')
      ->where('ei.employee_id = ?', $this->id)
      ->andWhere('(ei.is_completed = ? OR ei.is_completed IS NULL)', false)
      ->andWhere('(ei.deadline IS NULL OR ei.deadline > ?)', date('Y-m-d H:i:s'));
    return $query->execute();
  }
  public function getReports( $type = 'day'){
    $query = Doctrine::getTable('EmployeeTrainingReport')->createQuery('etr')
      ->where('etr.employee_id = ?', $this->id)
      ->andWhere('etr.type_for = ?', $type)
      ->orderBy('etr.day ASC');
    return $query->execute();

  }
  public function getYearStart($format = 'Y-m-d'){
    $employee_start = new DateTime($this->first_day);
    $employee_start->setDate(date('Y'), $employee_start->format('m'), $employee_start->format('d'));
    $today = new DateTime();
    //if the employer started to work in day/month before todays date then 
    //his 'work year' started on year ago
    if($employee_start > $today){
      $employee_start->modify('-1 year');
    }
    if($format !== null){
      return $employee_start->format($format);
    }
    return $employee_start;
  }
  public function getYearEnd($format = 'Y-m-d'){
    $employee_end_year = $this->getYearStart(null);
    $employee_end_year->modify('+1 year');
    $employee_end_year->modify('-1 day');
    if($format !== null){
      return $employee_end_year->format($format);
    }
    return $employee_end_year;
  }

  public function updateAbsence(){

    $q = Doctrine::getTable('Absence')->getEmployeesAbsenceQuery($this->id);
    $q->andWhere('a.date_start >= ?', $this->getYearStart());
    $q->andWhere('a.date_start <= ?', $this->getYearEnd());
    $absences = $q->execute();

    $days = 0;
    $occurences = 0;
    foreach($absences as $absence){
      $days += $absence->rate;
      if($absence->rate >= 1){
        $occurences++;
      }
    }
    $this->absent_occurences = $occurences;
    $this->absent_days = $days;
    $this->save();
  }
  public function getActualAbsences(){
    $q = Doctrine::getTable('Absence')->getEmployeesAbsenceQuery($this->id);
    $q->andWhere('a.date_start >= ?', $this->getYearStart());
    $q->andWhere('a.date_start <= ?', $this->getYearEnd());
    return $q->execute();
  }
  public function getAbsences(){
    $q = Doctrine::getTable('Absence')->getEmployeesAbsenceQuery($this->id);
    return $q->execute();
  }
  public function getToYearEnd(){
    $year_end = $this->getYearEnd(null);
    $left = $year_end->diff(new DateTime(), true);
    return $left->format('%a');
  }
  public function getTimeOffRemaining(){
    return number_format((float)sfConfig::get('max_absent_days', 21) - $this->absent_days, 1);
  }
  public function getOccurencesRemaining(){
    return sfConfig::get('max_absent_occurences', 8) - $this->absent_occurences;
  }
  public function getAbsentDays() {
    $today = new DateTime();
    $today->setTime(0, 0);
    if($this->getYearStart(null) >= $today){
      $this->updateAbsence();
    }
    return $this->_get("absent_days"); 
  }
  public function getAbsentOccurences() {
    $today = new DateTime();
    $today->setTime(0, 0);
    if($this->getYearStart(null) >= $today){
      $this->updateAbsence();
    }
    return $this->_get("absent_occurences"); 
  }
  public function highAbsency(){
    if($this->getOccurencesRemaining() <= 4 || $this->getTimeOffRemaining() <= 9){
      return true;
    }
    return false;
  }
  public function highComplains(){
    if($this->valid_complains >= 2 || $this->all_complains >= 3){
      return true;
    }
    return false;
  }
  //clients comments
  public function countComments(){
    $this->valid_complains = Doctrine::getTable('EmployeeClientComment')->countValidEmployeeComments($this->id);
    if($this->valid_complains >= 2){
      Alert::sendOffice($this->id, 'Alert!', 'Employee received '. $this->valid_complains .' valid complaints within the last 3 months');
    }
    $this->all_complains = Doctrine::getTable('EmployeeClientComment')->countAllEmployeeComments($this->id);
    if($this->all_complains >= 3){
      Alert::sendOffice($this->id, 'Alert!', 'Employee received '. $this->all_complains .' complaints within the last 3 months');
    }
    $this->save();
  }

  public function countDamages(){
    $this->damages_count = Doctrine::getTable('EmployeeDamage')->countEmployeeDamages($this->id);
    $this->damages_cost = Doctrine::getTable('EmployeeDamage')->sumEmployeeDamages($this->id);
    $this->save();
  }
  public function sendSms($text){
    if(sfConfig::get('app_twilio_enabled', false)){
      try{
      $client = new Services_Twilio(sfConfig::get('app_twilio_sid'), sfConfig::get('app_twilio_token'));
      $message = $client->account->sms_messages->create(
        sfConfig::get('app_twilio_from'), // From this number
        $this->cellphone, // Text this number
        $text
      );

      return $message->sid;
      } catch ( Exception $e){
      }
    }
    return true;
  }
  public function getDocumentList(){
    return Doctrine::getTable('EmployeeDocument')->getEmployeeDocuments($this->id);
  }
  public function __toString(){
    return $this->first_name . ' ' . $this->last_name;
  }
}
